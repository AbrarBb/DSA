from collections import defaultdict

# Helper function to perform DFS and fill stack by finishing order
def DFS_Fill_Order(v, graph, visited, stack):
    visited.add(v)
    for neighbor in graph[v]:
        if neighbor not in visited:
            DFS_Fill_Order(neighbor, graph, visited, stack)
    stack.append(v)

# Helper function to transpose the graph
def Transpose(graph):
    transposed = defaultdict(list)
    for node in graph:
        for neighbor in graph[node]:
            transposed[neighbor].append(node)
    return transposed

# Helper function to collect nodes in an SCC
def DFS_Collect_SCC(v, graph, visited, scc):
    visited.add(v)
    scc.append(v)
    for neighbor in graph[v]:
        if neighbor not in visited:
            DFS_Collect_SCC(neighbor, graph, visited, scc)

# Main function to find all SCCs
def Kosaraju_SCC(graph):
    stack = []
    visited = set()
    SCC_list = []

    # Step 1: Fill stack with nodes in the order of finishing time
    for node in graph:
        if node not in visited:
            DFS_Fill_Order(node, graph, visited, stack)

    # Step 2: Transpose the graph
    transposed_graph = Transpose(graph)

    # Step 3: Process nodes in reverse order from stack on transposed graph
    visited.clear()
    while stack:
        node = stack.pop()
        if node not in visited:
            scc = []
            DFS_Collect_SCC(node, transposed_graph, visited, scc)
            SCC_list.append(scc)

    return SCC_list

# Example usage
graph = {
    1: [2],
    2: [3],
    3: [1, 4],
    4: [5],
    5: [],
}

SCCs = Kosaraju_SCC(graph)
print("Strongly Connected Components:", SCCs)
